// Compile _pb2.py with 
// protoc -I=$SRC_DIR --python_out=$DST_DIR $SRC_DIR/STGProto.proto
// e.g. protoc --python_out=../STG/ STGProto.proto
// or for same folder ops just
// protoc --python_out=. STGProto.proto
// replace python_out with csharp_out for .cs file

syntax = "proto3";

package stg_levelset_proto;
option csharp_namespace = "STG";

message Levelset {
    string title = 1;
    repeated Gameboard levels = 2;
    repeated string authors = 3;
}

// Optimized for editors and sharing. Setup Gameboard from Level.
message Level {
    string title = 1;
    repeated string authors = 2;
    Gameboard gameboard = 4;
}

// Optimized for in-memory gameplay. Setup from Level.
message Gameboard {
    int32 size_x = 1;
    int32 size_y = 2;
    int32 size_z = 3;
    int32 tick = 4;
    Gamestate gamestate = 5;

    // list index by color, map index by channel
    // Global variables are stored in Colors and Channels. 
    // Channels are nested under Colors. A toggle event 
    // consists of a {Color, Channel} combo, either of which can be 0 (default).
    // If color == 0, iterate through all colors and toggle the
    // specified channel.
    repeated ChannelSet globals = 6;

    // p = z * (size_x + size_y) + y * size_x + x
    // x = (p % size_z) % size_x
    // y = (p % size_z) // size_x
    // z = p // size_z
    // position to cell containing tokens
    map<int32, Cell> map = 8;

    // key = id * 100_000 + subid. Each element can have up to 100_000 instances.
    map<int32, ElementState> element_states = 9;
}

message ChannelSet {
    map<int32, bool> channels = 1;
}

message Cell {
    Token terrain = 1;
    Token terrain_modifier = 2;
    Token pickup = 3;
    Token mob = 4;
    Token top = 5;
    Token north = 6;
    Token east = 7;
    Token south = 8;
    Token west = 9;
}

message Token {
    ElemId id = 1;
    int32 subid = 2;
}

message ElementState {
    int32 rule = 1;
    int32 channel = 2;
    Color color = 3;
    Direction dir = 4;
    int32 count = 5;
    repeated InventoryItem inventory = 6;
    // TODO: how to handle tags like FORCED/SLIDING.
    // repeated ElemTag tags = 7;
}

message InventoryItem {
    ElemId id = 1;
    int32 rule = 2;
    int32 color = 3;
    int32 count = 4;
}

message Input {
    Direction primary = 1;
    Direction secondary = 2;
    int32 action = 3; // 0 indicates no action. Likely limit to 1, 2, or 3.
}

enum ElemId {
    ELEMID_UNDEFINED = 0;

    // TERRAIN
    SPACE = 1;
    FLOOR = 2; // + color * 10_000
    WALL = 3; // + (color * 10_000) + rule (0 = NORMAL, 1 = APPEARING, 2 = INVISIBLE, 3 = BLUE REAL, 4 = BLUE FAKE)
    EXIT = 4; // + color * 10_000, add time limit to elementstate
    WATER = 5; // + color * 10_000 (for dirt/floor that appears when filled in)
    FIRE = 6; // + color * 10_000 (for water that appears when filled in)
    DIRT = 7; // + color * 10_000 (for floor that appears)
    GRAVEL = 8;
    ICE = 9;
    FORCE =10; // + color * 10_000 + direction (0 = RAND, 1 = N, 2 = E, 3 = S, 4 = W)
    CLONER = 11; // + color * 10_000
    HINT = 12;
    CHECKPOINT = 13;
    THIEF = 14; // + rule
    TELEPORT = 15; // + color * 10_000
    TRAP = 16; // + color * 10_000 + rule (0 = OPEN, 1 = SHUT)
    DOOR = 17; // + color * 10_000
    TOGGLE_WALL = 18; // + color * 10_000 + rule (0 = OPEN, 1 = SHUT)
    POPUP_WALL = 19; // + color * 10_000 + count (1-99)

    // NESW
    PANEL = 100; // + color * 10_000
    TOGGLE_PANEL = 101; // + color * 10_000 + rule (0 = OPEN, 1 = SHUT)
    ONE_WAY_PANEL = 102; // + color * 10_000 + rule (0 = IN, 1 = OUT)
    POPUP_PANEL = 103; // + color * 10_000 + count

    // Modifies exit direction. Use on ice for ice corners.
    // Also useful on floors and force floors.
    CORNER = 104; // + color * 10_000 + dir (0 = NE, 1 = SE, 2 = SW, 3 = NW)

    // TERRAIN_MODIFIER
    SOCKET = 200; // + color * 10_000 + count (= nchips)
    // TOGGLE: Toggle event for {color, channel} when pressed. (default for TW cloners, tanks, toggles).
    // HOLDONE: (default for TW traps)
    //      Toggle event when the first HOLDONE button of this {color, channel} is pressed.
    //      Toggle event when the last HOLDONE button of this {color, channel} is released.
    // HOLDALL
    //      Toggle event when the last HOLDALL button of this {color, channel} is pressed.
    //      Toggle event when the first HOLDALL buttonn of this {color, channel} is released.
    // ONEOF
    //      Set this {color, channel} to True.
    //      For this {color}, set all other channels to False.
    // AREA
    //      Same as toggle but only acts on elements in a 5x5 square.
    TOGGLE_BUTTON = 201; // + color * 10_000 + channel
    HOLDONE_BUTTON = 202; // + color * 10_000 + channel
    HOLDALL_BUTTON = 203; // + color * 10_000 + channel
    ONEOF_BUTTON = 204; // + color * 10_000 + channel
    AREA_BUTTON = 205 // + color * 10_000 + channel
    

    // PICKUP
    // Rule: 
    // --NORMAL: mobs can enter but cannot pickup
    // --RAINBOW_FENCE: mobs can pickup and use
    // --FENCE: mobs cannot enter
    CHIP = 300; // + color * 10_000 + rule * 1_000 + count
    BOMB = 301;
    FLIPPERS = 302; // + rule * 1_000 + count
    SUCTION = 303; // + rule * 1_000 + count
    FIREBOOTS = 304; // + rule * 1_000 + count
    SKATES = 305; // + rule * 1_000 + count
    KEY = 306; // + color * 10_000 + rule * 1_000 + count (999 = FOREVER KEY, do not decrement)

    // MOB
    PLAYER = 400; // + mob_id
    DIRT_BLOCK = 401; // + mob_id
    // 1 ANT 2 PARA 3 GLIDER 4 FIREBALL 5 BALL 6 WALKER 7 BLOB 8 TEETH
    MONSTER = 402; // + mob_id
    TANK = 403; // + mob_id

    // Invisible token that blocks mob entry until next tick.
    // Ensures well behaved monster patterns.
    MOB_FOLLOWER = 499;

    // TOP
    CANOPY = 500; // + color * 10_000
}

enum Gamestate {
    GAMESTATE_UNDEFINED = 0;
    PLAY = 1;
    LOSE = 2;
    WIN = 3;
}

enum Color {
    COLOR_UNDEFINED = 0;
    RED = 1;
    BLUE = 2;
    GREEN = 3;
    YELLOW = 4;
    CYAN = 5;
    MAGENTA = 6;
    ORANGE = 7;
    BROWN = 8;
}

enum Direction {
    DIRECTION_UNDEFINED = 0;
    N = 1;
    E = 2;
    S = 3;
    W = 4;
    NE = 5;
    SE = 6;
    SW = 7;
    NW = 8;
    RANDOM = 9;
}